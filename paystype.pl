#!/usr/bin/perl
# ------------------- NoDeny ------------------
# Copyright (с) Volik Stanislav, 2008, 2009
# Read license http://nodeny.com.ua/license.txt
# ---------------------------------------------
$VER=50.32;

$ct_err_data='<span class=error>Ошибка в данных</span>';
$ct_err_label='<span class=error>*</span>';

# * для старых версий биллинга, не удалять
%ct=(
  1 => 'Бонус. Возврат оборудования',
  2 => 'Бонус. Лояльность',
  3 => 'Бонус. Акция',
  4 => 'Бонус. За помощь сети',
  5 => 'Недополученная услуга',
  6 => 'Перевод с другого счета',
  7 => 'Банковский перевод',
  8 => '_Подтвержден_',
  9 => 'Запись отредактирована',
 10 => 'Бонус. Акция подключения',
 13 => 'Перенос баланса со старого биллинга',
 80 => 'Неактуальный платеж',
 94 => 'Платежная система PayU',
 95 => 'Платежный терминал EasyPay',
 96 => 'Платежный терминал UKR.NET',
 97 => 'Платежный терминал NONSTOP24',
 98 => 'Эквайринг',
 99 => 'Карточки пополнения',

100 => 'Оплата подключения',
101 => 'Установка доп.оборудования',
102 => 'Вызов мастера',
104 => 'Штраф',
105 => 'Снятие за услуги',
106 => 'Перевод на другой счет',
109 => 'Запись отредактирована',
110 => 'Снятие за услуги интернет',
111 => 'Платеж-опция',
112 => 'Автоплатеж',
113 => 'Перенос баланса со старого биллинга',
114 => 'Абонплата суточная',
180 => 'Неактуальный платеж',
199 => 'Виртуальный магазин',

200 => 'Развитие',
201 => 'Реализация товара',
202 => 'Вывод из платежных систем',
209 => 'Запись отредактирована',
299 => 'Реализация карточек',

300 => 'Аренда',
301 => 'Налоги',
302 => 'Материалы',
303 => 'Оборудование',
304 => 'Ремонт',
305 => 'Интернет канал',
306 => 'Проезд',
307 => 'Премия',
308 => 'Канцтовары',
309 => 'Запись отредактирована',
310 => 'Кабель внешн. прокладка',
311 => 'Транспорт',
312 => 'Сервера',
313 => 'Офисные расходы',
314 => 'Реклама',
315 => 'Договора ЖЕК и пр',
316 => 'Инструмент',
317 => 'Телефония',
318 => 'Расходы на подключение',
319 => 'Зарплата',
320 => 'Кабель внутр. прокладка',

400 => 'Со страницы статистики',
401 => 'Модуль карточек оплаты',
402 => 'Модуль UkrMoney',
403 => 'Мерчант Приватбанка',
404 => 'Сообщение системы',
408 => 'Подтвержденная передача',
409 => 'Отклоненная передача',
410 => 'Изменение данных клиента',
411 => 'Новый клиент',
412 => 'Изменение параметров NoDeny',
413 => 'Событие работников',
414 => 'Карточки оплаты',
415 => 'Перемещение карточек оплаты',
416 => 'Операции с оборудованием',
417 => 'Запрос на изменение',
418 => 'Изменение платежа',			# *
419 => 'Блокировка',
420 => 'Удаление клиента',
421 => 'Смена состояния учетки',
422 => 'Установка дня н.п. услуг',
423 => 'Блокировка по задолженности',
424 => 'Первая активность',
425 => 'Блокировка по потокам',
426 => 'Удаление врем.платежа',
427 => 'Карточки NoDeny: код не существует',
428 => 'Заказ смены пакета',
429 => 'Смена состояния учетки',
430 => 'Запланированное событие',
431 => 'Запланированная смена пакета',
432 => 'История смены тарифов',
433 => 'История смены доп. тарифов',
440 => 'Мерчант Приватбанка: заявка',
441 => 'Мерчант Приватбанка: ошибка',
442 => 'Мерчант Приватбанка: заявка оплачена',
450 => 'Блокировка заказа пакета',
451 => 'Блокировка сообщений от клиента',
460 => 'Задание работниками выполняется',
461 => 'Задание работниками выполнено',
465 => 'Начало трудового дня',
466 => 'Конец трудового дня',
470 => 'Передача наличных',
471 => 'Изменение тарифа, необходимо обновление ядром',
472 => 'Изменение тарифа',
480 => 'Ядро NoDeny. Сообщение',
481 => 'Ядро Nodeny. Проблема',
490 => 'Сообщение клиенту',
491 => 'Сообщение клиента',
492 => 'Сообщение клиента, отвечено',
493 => 'Сообщение, клиент ознакомлен',
495 => 'Замечание клиенту',
496 => 'Многоадресное сообщение',
500 => 'Заготовка для платежа',
501 => 'Измененная запись',
502 => 'Изменение записи',
510 => 'Ошибка обновления баланса',
520 => 'Удаление карточки пополнения',
530 => 'Реквизиты платежа',
531 => 'Реквизиты неоформленного платежа',
599 => '!!! Недействительная запись !!!',

600 => 'Наличный платеж',
609 => 'Запись отредактирована',
700 => 'Возврат наличных',
709 => 'Запись отредактирована',

900 => 'Аванс',
901 => 'Зарплата',
902 => 'Премия',
909 => 'Запись отредактирована',

1000 => 'Временный платеж',
);

@ct_category_select=();
foreach (sort {$ct{$a} cmp $ct{$b}} (keys %ct))
 {
  $ct_category_select[int($_/100)].="<option value=$_>$ct{$_}</option>";
 }

# ---
# Список категорий, платежи которых запрещено редактировать, вернее разрешено
# редактировать имеющим привилегии `редактирование событий`
# Пока значение хеша не придумал, но чувствую в будущем понадобится
%ct_block_edit=(
  80 => 1,
  94 => 1,
  95 => 1,
  96 => 1,
  97 => 1,
  98 => 1,
 180 => 1,
);

# ---

%ct_name_fields=(
  94 => ['Идентификатор tnx_id','Комментарий для клиента'],
  95 => ['Идентификатор tnx_id','Комментарий для клиента'],
  96 => ['Идентификатор tnx_id','Комментарий для клиента'],
  97 => ['Идентификатор tnx_id','Комментарий для клиента'],
  98 => ['Идентификатор tnx_id','Комментарий для клиента'],
 111 => ['Закодированные данные','Комментарий для клиента'],
 450 => ['Комментарий для администратора','Сообщение, которое увидит клиент при заходе на страницу заказа пакетов'],
 451 => ['Комментарий для администратора','Сообщение, которое увидит клиент при попытке отправки сообщения'],
 465 => ['Комментарий при выходе на работу',''],
);

# ---

%ct_decode_mess=(
  94 => 'Закодирован идентификатор платежа в системе PayU. По этому идентификатору производится дальнейшая сверка взаиморасчетов и решение спорных вопросов. Изменять не рекомендуется.',
  95 => 'Закодирован идентификатор платежа в системе EasyPay. По этому идентификатору производится дальнейшая сверка взаиморасчетов и решение спорных вопросов. Изменять не рекомендуется.',
  96 => 'Закодирован идентификатор платежа в системе UKR.NET. По этому идентификатору производится дальнейшая сверка взаиморасчетов и решение спорных вопросов. Изменять не рекомендуется.',
  97 => 'Закодирован идентификатор платежа в системе NONSTOP24. По этому идентификатору производится дальнейшая сверка взаиморасчетов и решение спорных вопросов. Изменять не рекомендуется.',
 111 => 'id_опции{:}время_окончания_действия{:}категория_трафика',
 410 => 'В текстовом виде перечислены данные, которые были изменены',
 417 => 'cod{:}id##cod - символ, указывающий где нужно изменять данные#id - id строки данных в БД, которая подлежит изменению',
 422 => 'Закодировано число, должно быть от 1 до 31',
 427 => 'id_админа{:}код##Если вводил клиент, то id_админа = 0',
 423 => 'ip{:}баланс{:}граница отключения',
 428 => 'Пустое поле указывает на отмену заказа тарифного плана на следующий месяц',
 431 => 'date{:}tarif##date - дата в виде aa.bb.cccc без стартовых нулей#tarif - номер тарифного плана',
 432 => 'time{:}tarif##tarif- номер тарифного плана#time - время в виде timestamp',
 433 => 'time{:}tarif##tarif- номер дополнительного тарифного плана#time - время в виде timestamp',
 440 => 'Закодирована сумма пополнения, допускается только целое число',
 450 => 'Данная запись блокирует возможность клиенту через клиентскую статистику заказывать тарифный план на следующий месяц. Удалите эту запись чтобы отменить блокировку.',
 451 => 'Данная запись блокирует возможность клиенту через клиентскую статистику отправлять сообщения администрации. Удалите эту запись чтобы отменить блокировку.',
 490 => 'Допускается либо число либо пустое значение. Число указывает на id сообщения клиента, на которое дается ответ данным сообщением.',
 496 => 'Через запятую перечислены id групп клиентов, для которых сообщение будет выводиться в их клиентских статистиках. '.
  'Запятые перед и после списка id обязательны',
 500 => 'Закодирован id записи в таблице платежей, допускается только целое число. '.
    &ahref("$scrpt0&a=operations&act=help&theme=blank_pay",'Справка &rarr;'),
 502 => 'id_старой_записи{:}id_новой_записи##Id старой записи указывает на запись, в каком виде она была до изменения, id новой записи - финальный вариант записи. '.
    'Если id новой записи = 0 - запись была удалена',
 520 => 'id_карточки{:}номинал',
);

$ct_decode_mess{493}=$ct_decode_mess{490};
$ct_decode_mess{442}=$ct_decode_mess{440};

# ---

%category_subs=(
   80 => \&ct_tnt_pay,			# Неактуальный платеж
   94 => \&ct_payterm_payu,		# Платежный терминал PayU
   95 => \&ct_payterm_easypay,		# Платежный терминал EasyPay
   96 => \&ct_payterm_ukrnet,           # Платежный терминал Ukr.Net
   97 => \&ct_payterm_nonstop24,	# Платежный терминал Nonstop24
  112 => \&ct_autopay,			# Автоплатеж
  180 => \&ct_tnt_pay,			# Неактуальный платеж
  410 => \&ct_user_data_changed,	# Изменение данных клиента
  417 => \&ct_ask_change,		# Запрос на изменение (платежа, учетки...)
  421 => \&ct_1_auth_chg_state,		# Смена состояния учетки после первой авторизации
  422 => \&ct_set_start_day,		# Установка дня н.п. услуг
  423 => \&ct_block_balance,		# Блокировка по задолженности
  424 => \&ct_first_activity,		# Первая активность
  425 => \&ct_block_flows,		# Блокировка по потокам
  426 => \&ct_del_temp_pay,		# Удаление врем.платежа
  427 => \&ct_cards_nocod,		# Карточки: код не существует
  428 => \&ct_next_packet_chg,		# Заказ пакета
  429 => \&ct_1_traf_chg_state,		# Смена состояния учетки после первого трафика
  430 => \&ct_plan_event,		# Запланированное событие
  431 => \&ct_plan_change_paket,	# Запланированное изменение пакета
  432 => \&ct_packet_history,		# История смены тарифных планов
  433 => \&ct_dpacket_history,		# История смены дополнительных тарифных планов
  440 => \&ct_pr_bank_ask,		# Мерчант Приватбанка: заявка
  441 => \&ct_pr_bank_error,		# Мерчант Приватбанка: ошибка
  442 => \&ct_pr_bank_made,		# Мерчант Приватбанка: заявка оплачена
  451 => \&ct_block_mess,		# Блокировка сообщений от клиента
  460 => \&ct_work_now,			# Задание работниками выполняется
  461 => \&ct_work_made,		# Задание работниками выполняется
  461 => \&ct_work_made,		# Задание работниками выполняется
  490 => \&ct_mess_2user,		# Сообщение клиенту
  493 => \&ct_mess_2user,		# Сообщение клиенту, клиент ознакомлен
  496 => \&ct_mess_2all,		# Многоадресное сообщение
  500 => \&ct_blank_pay,		# Заготовка для платежа
  501 => \&ct_changed_pay,		# Измененная запись
  502 => \&ct_mod_pay,			# Изменение записи
  510 => \&ct_err_bal_optpay,		# Ошибка обновления баланса после проведения опционного платежа
  520 => \&ct_cards_del,		# Карточки: удаление
  530 => \&ct_pay_rec,			# Реквизиты платежа
  531 => \&ct_pay_rec,			# Реквизиты неоформленного платежа
 1000 => \&ct_temp_pay,			# Временный платеж
);


# Для вызываемых подпрограмм:
#  0 - поле reason, (не отфильтровано!)
#  1 - поле coment, (не отфильтровано!)
#  2 - время платежа
#  3 - id клиентской записи

# Должны вернуть:
#  0 - расшифрованное событие
#  1 - [текст, описывающий искажения в закодированных данных, если есть конечно]
#  2 - [если установлен, то указывает при выводе списка платежей для данного платежа не отображать поле coment]

sub ct_tnt_pay
{
 $_[0]!~/^(\d+):(.*)/ && return ('',"Повреждена структура закодированного сообщения");
 my ($time,$mess)=($1,$2);
 return('<span class=error>Платеж проведен задним числом '.&the_time($time).'</span><br><br>'.&Filtr_out($mess));
}

sub ct_temp_pay
{
 return("<span class=data2>Платеж будет удален</span> ".&the_time($_[2]).'<br>'.&Show_all($_[0]));
}

sub ct_payterm_payu
{
 return("Уникальный id платежа в системе PayU: ".&Filtr_out($_[0]));
}

sub ct_payterm_easypay
{
 return("Уникальный id платежа в системе EasyPay: ".&Filtr_out($_[0]));
}

sub ct_payterm_ukrnet
{
 return("Уникальный id платежа в системе Ukr.Net: ".&Filtr_out($_[0]));
}

sub ct_payterm_nonstop24
{
 return("Уникальный id платежа в системе NONSTOP24: ".&Filtr_out($_[0]));
}

sub ct_autopay
{
 return($ct_err_data,'Нарушена структура автоплатежа') if $_[0]!~/^(-?\d+\.?\d*):(\d+)/;
 my $money=$1 + 0;
 my $time=int $2;
 return("Снятие $money $gr (Период автоплатежа $time сек)".$_[1]);
}

sub ct_user_data_changed
{
 $_=$_[0];
 s/\n/<br>/g;
 return("Изменены следующие данные:<br>$_");
}

sub ct_ask_change
{
 my ($cod,$data)=split /:/,$_[0];
 my $intdata=int $data;
 my $cod=($cod eq 'p' && 'Необходимо изменить '.&ahref("$scrpt0&a=pays&act=show&id=$intdata","этот платеж")).
   ($cod eq 'u' && &ahref("$scrpt0&a=user&id=$intdata","Необходимо изменить данные клиента id=$intdata")).
   ($cod eq 'd' && &ahref("$scrpt0&a=user&id=$intdata","Необходимо удалить учетную запись клиента id=$intdata"));
 return($cod||$ct_err_data,!$cod && 'Код, указывающий на то, какие данные требуется изменить, неверен');
}

sub ct_1_auth_chg_state
{
 return("Первая авторизация. Учетная запись выведена из состояния `на подключении`");
}

sub ct_1_traf_chg_state
{
 return("Первый исходящий трафик учетки без авторизации. Учетная запись выведена из состояния `на подключении`");
}

sub ct_set_start_day
{
 return('Первая авторизация. День начала потребления услуг установлен в '.(int $_[0]));
}

sub ct_block_balance
{
 my @f=split /:/,&Filtr_out($_[0]);
 return("Заблокирован по денежной задолженности $f[0]: $f[1] < $f[2]");
}

sub ct_first_activity
{
 return("Замечена первая активность клиента (авторизация/исходящий трафик). Событие может использоваться как признак, что с этого момента клиент считается подключенным");
}

sub ct_block_flows
{
 my @f=split /:/,&Filtr_out($_[0]);
 return("$f[0] заблокирован по превышению (дважды) количества потоков трафика: $f[1] (граница $f[2])");
}

sub ct_del_temp_pay
{
 return "Удален временный платеж в размере ".&Filtr_out($_[0]);
}

sub ct_cards_nocod
{
 my ($aid,$cod)=split /:/,&Filtr_out($_[0]);
 # $ct_A и $ct_Asort только глобальные чтобы не было перечитки списка админов при каждом вызове
 ($ct_A,$ct_Asort)=&Get_adms() unless defined $ct_A; # Получим список админов если ранее не получали
 return("На момент попытки активации введеный код пополнения $cod отсутствовал в БД".
   ($ct_A->{$aid}{admin} && ". Действие произвел админ $ct_A->{$aid}{admin}"));
}

sub ct_next_packet_chg
{# название пакета фильтруем (обычно не надо), потому что админ может редактировать платеж
 return $_[0]? "С клиентской статистики заказан тарифный план: ".&commas(&Filtr_out($_[0])) : 'С клиентской статистики было дано указание не менять текущий тарифный план в следующем месяце';
}

sub ct_plan_event
{
 my ($event,$time)=split /:/,&Filtr_out($_[0]);
 my @events=(
   '',
   'Удвоение всех положительных платежей',
 );
 return('запланированное событие','',1) if $event!~/^\d+$/ || $time!~/^\d+$/;
 $event=$events[$event]||'неизвестное запланированное событие';
 $event.='. Будет выполнено в '.&the_short_time($_[2]+$time,$t) if $time;
 return($event,'код события : время в секундах через которое от времени создания будет выполнено событие.');
}

sub ct_plan_change_paket
{
 return($ct_err_data,'несоответствие шаблону') if $_[0]!~/^(\d+\.\d+.\d+):(\d+)/;
 return($ct_err_data,"тарифный план $2 не существует") unless $Plan_name[$2];
 return("$1 в 0 часов 0 минут установка тарифного плана: $Plan_name_short[$2]");
}

sub ct_packet_history
{
 my ($i,$line,$out,$tarif,$time);
 return($ct_err_data,'недопустимые символы в закодированном поле') if $_[0]=~/[^\d\n:]/g;
 $i=0;
 $out='';
 foreach $line (split /\n/,$_[0])
 {
    $i++;
    $out.='<br>';
    ($time,$tarif)=split /:/,$line;
    if( !$time || !$tarif )
    {
       $out.="<span class=error>ошибка в данных</span>, строка $i";
       next;
    }
    $out.=&the_time($time).'&nbsp;&nbsp;'.($Plan_name_short[$tarif] || '<span class=error>неизвестный тариф</span>');
 }
 return("История смен тарифных планов:<br>$out");
}

sub ct_dpacket_history
{
 my ($i,$line,$out,$tarif,$time);
 return($ct_err_data,'недопустимые символы в закодированном поле') if $_[0]=~/[^\d\n:]/g;
 $i=0;
 $out='';
 foreach $line (split /\n/,$_[0])
   {
    $i++;
    $out.='<br>';
    ($time,$tarif)=split /:/,$line;
    if (!$time)
      {
       $out.="<span class=error>ошибка в данных</span>, строка $i";
       next;
      }
    $out.=&the_time($time).'&nbsp;&nbsp;'.($tarif? $Plans3{$tarif}{name} || '<span class=error>неизвестный тариф</span>' : '<span class=disabled>отключен</span>');
   }
 return("История смен дополнительных тарифных планов:<br>$out");
}

sub ct_pr_bank_ask
{
 $_[0]=~/^ *(\d+) *$/ or return($ct_err_data,'закодирована сумма пополнения, допускается только целое число');
 return "Заявка на пополнение счета на сумму $1 $gr через мерчант Приватбанка. При получении подтверждения от ПБ, данная заявка будет помечена как выполненная.";
}

sub ct_pr_bank_error
{
 my ($cod,$responsecode,$reasoncode,$pay_id)=split /:/,&Filtr_out($_[0]);
 $cod=(
   '',
   "OrderID не соответствует шаблону",
   "Запись с id=$pay_id в таблице платежей либо отсутствует либо не является заявкой на оплату. Возможно это поддельный запрос. Результат оплаты игнорируется",
   "Платеж не может быть осуществлен, поскольку заявка в таблице платежей (id записи=$pay_id) искажена: поле, хранящее сумму платежа не является целым числом",
   "ResponseCode указывает, что транзакция отклонена",
   "ResponseCode указывает, что транзакция завершена успешно. Однако подписи не совпали. Скорее всего запрос был подделан.",
 )[$cod] || 'неизвестный код';
 return("Ошибка при пополнении счета через мерчант Приватбанка. Приняты данные: ResponseCode=$responsecode, ReasonCode=$reasoncode. ".
   "Механизм работы мерчанта не гарантирует, что данные не были подделаны, поэтому мы только регистрируем их.<br><br>Детальнее об ошибке: $cod"); 
}

sub ct_pr_bank_made
{
 return("Заявка на пополнение счета на сумму $_[0] $gr через мерчант Приватбанка оплачена.");
}

sub ct_block_mess
{
 return "Клиенту запрещено посылать сообщения через страницу статистики.".($_[1] && ' Комментарий, который увидит клиент:');
}

sub ct_work
{
 my ($job,$mess,$wid,$w1,$w2,$w3,$w4,$w5);
 my @workers;

 $ct_W=&Get_workers() unless defined $ct_W;	# получим список работников если ранее не получали. Глобальная переменная!
 ($w1,$w2)=split /#/,$_[0];			# w2 - результат выполнения задания, если это завершенное задание
 ($job,@workers)=split /,/,$w1;

 $mess='';
 $mess.='Бланк задания'.$br if $#workers<0;
 foreach (@workers)
   {
    $wid=abs int $_;
    $w1=defined($ct_W->{$wid}{name})? $ct_W->{$wid}{name} : "[<span class=error>нет в базе</span>  id=$wid]";
    $mess.='Работник: '.($PR{23}?  &ahref("$scrpt0&a=oper&act=workers&op=edit&id=$wid",$w1) : $w1);
    $mess.=$_<0? " (ответственный)$br" : $br;
   }
 $mess.='Вид работ: '.&bold($jobs[$job]) if $jobs[$job];
 if ($w2)
   {
    @workers=split /,/,$w2;
    $w3=shift @workers; # время выполнения работы
    $w4=shift @workers; # время постановки задания
    $w5=shift @workers; # оценка выполнения работы
    $mess.=$br.'Время выполнения задания: '.&bold(&the_hh_mm($w3/60));
    $mess.=$br.'Время постановки задания: '.&the_time($w4);
    $mess.=$br.'Результат выполнения: '.&bold($joblevel[$w5]) if $joblevel[$w5];
    foreach (@workers)
      {
       $wid=abs int $_;  
       $w1=defined $ct_W->{$wid}{name}? $ct_W->{$wid}{name} : "[<span class=error>нет в базе</span>  id=$wid]";
       $mess.=$br.'Замечания к работнику: '.($PR{23}? &ahref("$scrpt0&a=oper&act=workers&op=edit&id=$wid",$w1) : $w1);
       $mess.=' (ответственный)' if $_<0;
      }
    }
 return $mess;
}

sub ct_work_now
{
 #$workers[0]? "<span class='rowsv error'>$name_pay{$bonus}</span>" : '<span class=rowsv>Бланк задания работникам</span>';
 return(&ct_work);
}

sub ct_work_made
{
 return(&ct_work);
}

sub ct_mess_2user
{
 my $id=$_[0];
 return '' unless $id;
 $id!~/^\d+$/ && return ($ct_err_data,'Поле не является целым числом');
 my $p=&sql_select_line($dbh,"SELECT * FROM pays WHERE id=$id");
 return ($ct_err_data,"Платеж с id=$id не найден. Возможно он удален. Рекомендуется установить поле в пустое значение.") unless $p;
 return ($ct_err_data,"Платеж с id=$id не является сообщением для клиента.") if $p->{type}!=30 || ($p->{category }!=491 && $p->{category }!=492);
 return ($ct_err_data,"Платеж с id=$id является сообщением не для данного клиента $p->{mid}!=$_[3].") if $p->{mid}!=$_[3];
 return ('В ответ на сообщение клиента:'.&div('disabled',&Show_all($p->{reason})));
}

sub ct_mess_2all
{
 my $grps='';
 foreach (split /,/,$_[0])
   {
    $grps.="<li>$UGrp_name{$_}</li>" if exists $UGrp_name{$_};
   }
 return ($grps? "Посылается клиентам в группах:<ul>$grps</ul>" : 'Сообщение не посылается никому');
}

sub ct_blank_pay
{
 return($ct_err_data,"В закодированном поле должно содержаться число - id платежа, которое планировалось изменить!") if $_[0]!~/^\d+$/;
 return("<span class=error>Заготовка для изменения</span> ".&ahref("$scrpt0&a=pays&act=show&id=$_[0]",'платежа &rarr;'));
}

sub ct_changed_pay
{
 my $reason=$_[0];
 $reason!~s/^(\d+):(\d+):(\d+):([\-\d\.]+):(.?):// && return ('',"Повреждена структура закодированного сообщения");
 my ($new_pay_id,$type,$category,$cash,$bonus)=($1,$2,$3,$4,$5);
 my $rand_id='ct'.$new_pay_id.'_'.int(rand(1000000));
 my $mess="Финальный вариант записи после всех редактирований: ".&ahref("$scrpt0&a=pays&act=show&id=$new_pay_id",'здесь &rarr;').
   $br2.'Тип: '.(
     $type==10? 'платеж':
     $type==20? 'временный платеж':
     $type==30? 'сообщение':
     $type==40? 'передача наличных':
     $type==50? 'событие':
     '<span class=error>ошибочный тип платежа</span>').$br;
 $mess.="Категория: $ct{$category}$br" if $ct{$category};
 $mess.="Финансы: $cash $gr$br" if $type==10 || $type==20 ||$type==40;
 $mess.="Безналичный платеж$br" if $bonus;
 $mess.="Поле reason:$br".&div('rowsv',$reason) if $reason!~/^\s*$/;
 $mess.="Поле coment:$br".&div('rowsv',$_[1]) if $_[1]!~/^\s*$/;
 return (&ahref(qq{javascript:show_x("$rand_id")},'Устаревшие данные отредактированной записи &darr;').
   "<div id=my_x_$rand_id style='display:none'>$mess</div>",'',1); # последний параметр говорит не выводить поле coment в списке платежей
}

sub ct_mod_pay
{
 $_[0]!~/^(\d+):(\d+)$/ && return ('',"Повреждена структура закодированного сообщения");
 return 'Была удалена '.&ahref("$scrpt0&a=pays&act=show&id=$1",'запись &rarr;')  unless $2;
 return &ahref("$scrpt0&a=pays&act=show&id=$1",'Данная запись').' была изменена в '.&ahref("$scrpt0&a=pays&act=show&id=$2",'данную запись');
}

sub ct_err_bal_optpay
{
 return "$ct_err_label После проведения опционного платежа не удалось обновить баланс клиента, требуется ручная корректировка баланса суперадминистратором!"
}

sub ct_cards_del
{
 $_[0]!~/^(\d+):(\d+\.?\d*)$/ && return ('',"Повреждена структура закодированного сообщения");
 return("<span class=error>Удалена карточка пополнения счета № $1, номиналом $2 $gr</span>");
}

# Реквизиты платежа
sub ct_pay_rec
{
 my ($pid,$uid,@f)=split /\^/,$_[0];
 my ($h,$out);
 $out='';
 foreach ('Сумма','Id абонента','ФИО','Договор','Улица','Дом','Квартира','Телефон')
 {
    $h=shift @f;
    next if $h eq '';
    $out.="$_: ".&Filtr_out($h).'<br>';
 }
 !$out && return('<span class=disabled>реквизиты не указаны</span>');
 $pid=int $pid;
 $uid=int $uid;
 $h=$pid? 'Реквизиты '.&ahref("$scrpt0&a=pays&act=show&id=$pid",'платежа').' клиента '.
    &ahref("$scrpt0&a=user&id=$uid",'&gt;&gt;&gt;') : 'Реквизиты неоформленного платежа';
 return("$h:<br><br>$out");
}

1;
